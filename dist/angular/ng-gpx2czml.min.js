!function(e,t){"use strict";"function"==typeof define&&define.amd?define(["angular"],t):"object"==typeof exports?module.exports=t(require("angular")):t(e.angular)}(this,function(e){"use strict";return e.module("ngGpx2czml",[]).service("gpx2czml",["$q","$http",function(e,t){return{async:function(e,t){function n(){4===a.readyState&&(200===a.status?r.parseGpx(a.responseText,function(e,n){"function"==typeof t&&t(e,n)}):"function"==typeof t&&t(!0,"http request error"))}var a,r=this;window.XMLHttpRequest?a=new XMLHttpRequest:window.ActiveXObject&&(a=new ActiveXObject("Microsoft.XMLHTTP")),a.onreadystatechange=n,a.open("GET",e),a.send()},asyncFromFile:function(e,t){var n=this;this.processingFiles(e,function(e,a){e?"function"==typeof t&&t(e,a):n.parseGpx(a,function(e,n){"function"==typeof t&&t(e,n)})})},processingFiles:function(e,t){var n=new FileReader,a="chrome";try{var r=e.target.files;if(n.onload=function(e){var r;e?r=e.target.result:(r=n.content,a="ie"),"function"==typeof t&&t(!1,r)},!(r.length>0))throw"file is not defined";n.readAsText(r[0],"UTF-8")}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseGpx:function(e,t){var n,a;try{window.DOMParser?(n=new DOMParser,a=n.parseFromString(e,"text/xml")):(a=new ActiveXObject("Microsoft.XMLDOM"),a.async="false",a.loadXML(e));var r=a.getElementsByTagName("gpx")[0];this.parseXml(r)}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseXml:function(e){console.log(e)},getTextTag:function(e){var t=e.textContent;return t.replace(/(^\s*)|(\s*$)/gi,""),t},bindCzmlData:function(e,t){var n=this;try{for(var a=e.getElementsByTagName("metadata")[0],r=a.getElementsByTagName("time")[0],i=e.getElementsByTagName("trk")[0],o=i.getElementsByTagName("trkseg")[0],s=o.getElementsByTagName("trkpt"),c=this.getTextTag(r),g=new Date(c).getTime(),p=[{name:e.getAttribute("creator"),version:e.getAttribute("version"),clock:{interval:null,currentTime:c,multiplier:1,range:"CLAMPED"}},{position:{cartographicDegrees:[]}}],l=0;l<s.length;l++){var u=s[l],f=parseFloat(u.getAttribute("lat")),m=parseFloat(u.getAttribute("lon")),y=parseFloat(n.getTextTag(u.getElementsByTagName("ele")[0])),T=n.getTextTag(u.getElementsByTagName("time")[0]),h=(n.getTextTag(u.getElementsByTagName("extensions")[0]),new Date(T).getTime()),d=(h-g)/1e3;p[1].position.cartographicDegrees.push(d),p[1].position.cartographicDegrees.push(m),p[1].position.cartographicDegrees.push(f),p[1].position.cartographicDegrees.push(y),l==s.length-1&&(p[0].clock.interval=c+"/"+T,p[1].availability=c+"/"+T)}"function"==typeof t&&t(!1,p)}catch(e){"function"==typeof t&&t(!0,e.toString())}}}}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
