!function(e,t){"use strict";"function"==typeof define&&define.amd?define(["angular"],t):"object"==typeof exports?module.exports=t(require("angular")):t(e.angular)}(this,function(e){"use strict";return e.module("ngGpx2czml",[]).service("gpx2czml",["$q","$http",function(e,t){return{async:function(e,t){function n(){4===r.readyState&&(200===r.status?a.parseGpx(r.responseText,function(e,n){"function"==typeof t&&t(e,n)}):"function"==typeof t&&t(!0,"http request error"))}var r,a=this;window.XMLHttpRequest?r=new XMLHttpRequest:window.ActiveXObject&&(r=new ActiveXObject("Microsoft.XMLHTTP")),r.onreadystatechange=n,r.open("GET",e),r.send()},asyncFromFile:function(e,t){var n=this;this.processingFiles(e,function(e,r){e?"function"==typeof t&&t(e,r):n.parseGpx(r,function(e,n){"function"==typeof t&&t(e,n)})})},processingFiles:function(e,t){var n=new FileReader,r="chrome";try{var a=e.target.files;if(n.onload=function(e){var a;e?a=e.target.result:(a=n.content,r="ie"),"function"==typeof t&&t(!1,a)},!(a.length>0))throw"file is not defined";n.readAsText(a[0],"UTF-8")}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseGpx:function(e,t){var n,r;try{window.DOMParser?(n=new DOMParser,r=n.parseFromString(e,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(e));var a=r.getElementsByTagName("gpx")[0];this.parseXml(a)}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseXml:function(e){console.log(e)},getTextTag:function(e){var t=e.textContent;return t.replace(/(^\s*)|(\s*$)/gi,""),t},bindCzmlData:function(e,t){var n=this,r=0;try{for(var a,o,i=(e.getElementsByTagName("metadata")[0],e.getElementsByTagName("trk")[0]),s=i.getElementsByTagName("trkseg")[0],c=s.getElementsByTagName("trkpt"),g=[{name:e.getAttribute("creator"),version:e.getAttribute("version"),clock:{interval:null,currentTime:a,multiplier:1,range:"CLAMPED"}},{position:{epoch:a,cartographicDegrees:[]}}],p=0;p<c.length;p++){var u=c[p],l=parseFloat(u.getAttribute("lat")),f=parseFloat(u.getAttribute("lon")),m=n.getTextTag(u.getElementsByTagName("ele")[0]),h=n.getTextTag(u.getElementsByTagName("time")[0]),y=new Date(h).getTime(),v=0==p?0:(y-o)/1e3;0===p&&(a=h,o=y),r+=m?parseFloat(m):0;var T=r/(p+1);g[1].position.cartographicDegrees.push(v),g[1].position.cartographicDegrees.push(f),g[1].position.cartographicDegrees.push(l),g[1].position.cartographicDegrees.push(m?parseFloat(m):T),p==c.length-1&&(g[0].clock.interval=a+"/"+h,g[1].availability=a+"/"+h)}"function"==typeof t&&t(!1,g)}catch(e){"function"==typeof t&&t(!0,e.toString())}}}}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
