!function(e,t){"use strict";"function"==typeof define&&define.amd?define(["angular"],t):"object"==typeof exports?module.exports=t(require("angular")):t(e.angular)}(this,function(e){"use strict";return e.module("ngGpx2czml",[]).service("gpx2czml",["$q","$http",function(e,t){return{async:function(e,t){function n(){4===a.readyState&&(200===a.status?r.parseGpx(a.responseText,function(e,n){"function"==typeof t&&t(e,n)}):"function"==typeof t&&t(!0,"http request error"))}var a,r=this;window.XMLHttpRequest?a=new XMLHttpRequest:window.ActiveXObject&&(a=new ActiveXObject("Microsoft.XMLHTTP")),a.onreadystatechange=n,a.open("GET",e),a.send()},asyncFromFile:function(e,t){var n=this;this.processingFiles(e,function(e,a){e?"function"==typeof t&&t(e,a):n.parseGpx(a,function(e,n){"function"==typeof t&&t(e,n)})})},processingFiles:function(e,t){var n=new FileReader,a="chrome";try{var r=e.target.files;if(n.onload=function(e){var r;e?r=e.target.result:(r=n.content,a="ie"),"function"==typeof t&&t(!1,r)},!(r.length>0))throw"file is not defined";n.readAsText(r[0],"UTF-8")}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseGpx:function(e,t){var n,a;try{window.DOMParser?(n=new DOMParser,a=n.parseFromString(e,"text/xml")):(a=new ActiveXObject("Microsoft.XMLDOM"),a.async="false",a.loadXML(e));var r=a.getElementsByTagName("gpx")[0];this.parseXml(r)}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseXml:function(e){console.log(e)},getTextTag:function(e){var t=e.textContent;return t.replace(/(^\s*)|(\s*$)/gi,""),t},bindCzmlData:function(e,t){var n=this;try{for(var a,r,o,i=(e.getElementsByTagName("metadata")[0],e.getElementsByTagName("trk")[0]),s=i.getElementsByTagName("trkseg")[0],c=s.getElementsByTagName("trkpt"),g=[{name:e.getAttribute("creator"),version:e.getAttribute("version"),clock:{interval:null,currentTime:a,multiplier:1,range:"CLAMPED"}},{position:{epoch:a,cartographicDegrees:[]}}],l=0;l<c.length;l++){var p=c[l],u=parseFloat(p.getAttribute("lat")),f=parseFloat(p.getAttribute("lon")),m=n.getTextTag(p.getElementsByTagName("ele")[0]),y=n.getTextTag(p.getElementsByTagName("time")[0]),h=new Date(y).getTime(),T=0==l?0:(h-r)/1e3;if(0===l&&(a=y,r=h),m)o=parseFloat(m);else for(var v=c[l+1],d=v?n.getTextTag(v.getElementsByTagName("ele")[0]):null,x=0;x<c.length;x++){var w=c[x],F=n.getTextTag(w.getElementsByTagName("ele")[0]);if(F){o=parseFloat(F);break}}g[1].position.cartographicDegrees.push(T),g[1].position.cartographicDegrees.push(f),g[1].position.cartographicDegrees.push(u),g[1].position.cartographicDegrees.push(m?parseFloat(m):d?(o+parseFloat(d))/2:o),l==c.length-1&&(g[0].clock.interval=a+"/"+y,g[1].availability=a+"/"+y)}"function"==typeof t&&t(!1,g)}catch(e){"function"==typeof t&&t(!0,e.toString())}}}}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWdweDJjem1sLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJhbmd1bGFyIiwidGhpcyIsInNlcnZpY2UiLCIkcSIsIiRodHRwIiwiYXN5bmMiLCJ1cmwiLCJjYkZ1bmMiLCJnZXRHcHhEYXRhIiwiaHR0cFJlcXVlc3QiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwic2VsZiIsInBhcnNlR3B4IiwicmVzcG9uc2VUZXh0IiwiaXNFcnJvciIsInJlcyIsIndpbmRvdyIsIlhNTEh0dHBSZXF1ZXN0IiwiQWN0aXZlWE9iamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9wZW4iLCJzZW5kIiwiYXN5bmNGcm9tRmlsZSIsImZpbGVzIiwicHJvY2Vzc2luZ0ZpbGVzIiwiY3ptbEVycm9yIiwiY3ptbFJlcyIsImUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwiYnJvd3NlciIsInRhcmdldCIsIm9ubG9hZCIsImRhdGEiLCJyZXN1bHQiLCJjb250ZW50IiwibGVuZ3RoIiwicmVhZEFzVGV4dCIsInRvU3RyaW5nIiwidG1wIiwieG1sIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwibG9hZFhNTCIsImdweE5vZGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcnNlWG1sIiwibm9kZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRUZXh0VGFnIiwidGFnIiwidGFnU3RyIiwidGV4dENvbnRlbnQiLCJyZXBsYWNlIiwiYmluZEN6bWxEYXRhIiwic3RhcnRUaW1lIiwic3RhcnRTZWNvbmRzIiwiY3VycmVudEVsZSIsInRya0NvbnRlbnQiLCJ0cmtTZWciLCJ0cmtQdHMiLCJjem1sRGF0YSIsIm5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJ2ZXJzaW9uIiwiY2xvY2siLCJpbnRlcnZhbCIsImN1cnJlbnRUaW1lIiwibXVsdGlwbGllciIsInJhbmdlIiwicG9zaXRpb24iLCJlcG9jaCIsImNhcnRvZ3JhcGhpY0RlZ3JlZXMiLCJpZHgiLCJ0cmtJbmZvIiwibGF0IiwicGFyc2VGbG9hdCIsImxvbiIsImVsZSIsInRpbWUiLCJ0YXJnZXRTZWNvbmRzIiwiRGF0ZSIsImdldFRpbWUiLCJkZWZmU2Vjb25kcyIsIm5leHRQdHMiLCJuZXh0RWxlIiwiZWlkeCIsImVsZUluZm8iLCJ0YXJnZXRFbGUiLCJwdXNoIiwiYXZhaWxhYmlsaXR5Il0sIm1hcHBpbmdzIjoiQ0FBQyxTQUFVQSxFQUFNQyxHQUNkLFlBR3NCLG1CQUFYQyxTQUF5QkEsT0FBT0MsSUFDekNELFFBQVEsV0FBWUQsR0FDUSxnQkFBWkcsU0FDaEJDLE9BQU9ELFFBQVVILEVBQVFLLFFBQVEsWUFFakNMLEVBQVFELEVBQUtPLFVBRWZDLEtBQU0sU0FBVUQsR0FDaEIsWUFPQSxPQUFPQSxHQUFRRixPQUFPLGlCQU1uQkksUUFBUSxZQUFBLEtBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQWtPUCxPQWhPRUMsTUFBUSxTQUFVQyxFQUFLQyxHQWNyQixRQUFTQyxLQUN3QixJQUEzQkMsRUFBWUMsYUFDYSxNQUF2QkQsRUFBWUUsT0FDZEMsRUFBS0MsU0FBU0osRUFBWUssYUFBYyxTQUFVQyxFQUFTQyxHQUN0QyxrQkFBVlQsSUFBd0JBLEVBQU9RLEVBQVNDLEtBR2xDLGtCQUFWVCxJQUF3QkEsR0FBTyxFQUFNLHVCQXBCbEQsR0FBSUUsR0FDQUcsRUFBT1gsSUFFUGdCLFFBQU9DLGVBQ1RULEVBQWMsR0FBSVMsZ0JBQ1RELE9BQU9FLGdCQUNoQlYsRUFBYyxHQUFJVSxlQUFjLHNCQUdsQ1YsRUFBWVcsbUJBQXFCWixFQUNqQ0MsRUFBWVksS0FBSyxNQUFPZixHQUN4QkcsRUFBWWEsUUFrQmRDLGNBQWdCLFNBQVVDLEVBQU9qQixHQUMvQixHQUFJSyxHQUFPWCxJQUVYQSxNQUFLd0IsZ0JBQWdCRCxFQUFPLFNBQVVULEVBQVNDLEdBRXpDRCxFQUNlLGtCQUFWUixJQUF3QkEsRUFBT1EsRUFBU0MsR0FFL0NKLEVBQUtDLFNBQVNHLEVBQUssU0FBVVUsRUFBV0MsR0FDckIsa0JBQVZwQixJQUF3QkEsRUFBT21CLEVBQVdDLFFBVXpERixnQkFBa0IsU0FBVUcsRUFBR3JCLEdBQzdCLEdBQ0lzQixHQUFTLEdBQUlDLFlBQ2JDLEVBQVUsUUFFZCxLQUNFLEdBQUlQLEdBQVFJLEVBQUVJLE9BQU9SLEtBZXJCLElBYkFLLEVBQU9JLE9BQVMsU0FBVUwsR0FDeEIsR0FBSU0sRUFDQ04sR0FJSE0sRUFBT04sRUFBRUksT0FBT0csUUFIaEJELEVBQU9MLEVBQU9PLFFBQ2RMLEVBQVUsTUFLSyxrQkFBVnhCLElBQXdCQSxHQUFPLEVBQU8yQixNQUkzQ1YsRUFBTWEsT0FBUyxHQUdqQixLQUFNLHFCQUZOUixHQUFPUyxXQUFXZCxFQUFNLEdBQUksU0FPOUIsTUFBT0ksR0FDVSxrQkFBVnJCLElBQXdCQSxHQUFPLEVBQU1xQixFQUFFVyxjQVdsRDFCLFNBQVcsU0FBVXFCLEVBQU0zQixHQUN6QixHQUFJaUMsR0FBSUMsQ0FFUixLQUVNeEIsT0FBT3lCLFdBQ1RGLEVBQU0sR0FBSUUsV0FDVkQsRUFBTUQsRUFBSUcsZ0JBQWlCVCxFQUFNLGNBRWpDTyxFQUFNLEdBQUl0QixlQUFjLG9CQUN4QnNCLEVBQUlwQyxNQUFRLFFBQ1pvQyxFQUFJRyxRQUFRVixHQUlkLElBQUlXLEdBQVVKLEVBQUlLLHFCQUFxQixPQUFPLEVBTTlDN0MsTUFBSzhDLFNBQVNGLEdBQ2QsTUFBT2pCLEdBQ1Usa0JBQVZyQixJQUF3QkEsR0FBTyxFQUFNcUIsRUFBRVcsY0FJbERRLFNBQVcsU0FBVUMsR0FDbkJDLFFBQVFDLElBQUlGLElBUWRHLFdBQWEsU0FBVUMsR0FFckIsR0FBSUMsR0FBU0QsRUFBSUUsV0FHakIsT0FGQUQsR0FBT0UsUUFBUSxrQkFBbUIsSUFFM0JGLEdBUVRHLGFBQWUsU0FBVVgsRUFBU3RDLEdBQ2hDLEdBQUlLLEdBQU9YLElBR1gsS0ErQkUsSUFBSSxHQXZCQXdELEdBQ0FDLEVBbUJBQyxFQXpCQUMsR0FEV2YsRUFBUUMscUJBQXFCLFlBQVksR0FDdkNELEVBQVFDLHFCQUFxQixPQUFPLElBQ2pEZSxFQUFTRCxFQUFXZCxxQkFBcUIsVUFBVSxHQUNuRGdCLEVBQVNELEVBQU9mLHFCQUFxQixTQU9yQ2lCLElBQ0ZDLEtBQU9uQixFQUFRb0IsYUFBYSxXQUM1QkMsUUFBVXJCLEVBQVFvQixhQUFhLFdBQy9CRSxPQUNFQyxTQUFXLEtBQ1hDLFlBQWNaLEVBQ2RhLFdBQWEsRUFDYkMsTUFBUSxhQUdWQyxVQUNFQyxNQUFRaEIsRUFDUmlCLDBCQU9JQyxFQUFJLEVBQUdBLEVBQU1iLEVBQU96QixPQUFRc0MsSUFBTyxDQUN6QyxHQUFJQyxHQUFVZCxFQUFPYSxHQUNqQkUsRUFBTUMsV0FBV0YsRUFBUVgsYUFBYSxRQUN0Q2MsRUFBTUQsV0FBV0YsRUFBUVgsYUFBYSxRQUN0Q2UsRUFBTXBFLEVBQUt1QyxXQUFXeUIsRUFBUTlCLHFCQUFxQixPQUFPLElBQzFEbUMsRUFBT3JFLEVBQUt1QyxXQUFXeUIsRUFBUTlCLHFCQUFxQixRQUFRLElBQzVEb0MsRUFBZ0IsR0FBSUMsTUFBS0YsR0FBTUcsVUFDL0JDLEVBQXNCLEdBQVBWLEVBQVUsR0FBTU8sRUFBZ0J4QixHQUFnQixHQVFuRSxJQU5ZLElBQVJpQixJQUNGbEIsRUFBWXdCLEVBQ1p2QixFQUFld0IsR0FJYkYsRUFDRnJCLEVBQWFtQixXQUFXRSxPQUt4QixLQUFJLEdBSEFNLEdBQVV4QixFQUFPYSxFQUFNLEdBQ3ZCWSxFQUFVRCxFQUFVMUUsRUFBS3VDLFdBQVdtQyxFQUFReEMscUJBQXFCLE9BQU8sSUFBTSxLQUUxRTBDLEVBQUssRUFBR0EsRUFBTzFCLEVBQU96QixPQUFRbUQsSUFBUSxDQUM1QyxHQUFJQyxHQUFVM0IsRUFBTzBCLEdBQ2pCRSxFQUFZOUUsRUFBS3VDLFdBQVdzQyxFQUFRM0MscUJBQXFCLE9BQU8sR0FFcEUsSUFBSTRDLEVBQVcsQ0FDYi9CLEVBQWFtQixXQUFXWSxFQUN4QixRQUtOM0IsRUFBUyxHQUFHUyxTQUFTRSxvQkFBb0JpQixLQUFLTixHQUM5Q3RCLEVBQVMsR0FBR1MsU0FBU0Usb0JBQW9CaUIsS0FBS1osR0FDOUNoQixFQUFTLEdBQUdTLFNBQVNFLG9CQUFvQmlCLEtBQUtkLEdBQzlDZCxFQUFTLEdBQUdTLFNBQVNFLG9CQUFvQmlCLEtBQUtYLEVBQUtGLFdBQVdFLEdBQVFPLEdBQVU1QixFQUFhbUIsV0FBV1MsSUFBWSxFQUFJNUIsR0FFcEhnQixHQUFRYixFQUFPekIsT0FBUSxJQUN6QjBCLEVBQVMsR0FBR0ksTUFBTUMsU0FBV1gsRUFBWSxJQUFNd0IsRUFDL0NsQixFQUFTLEdBQUc2QixhQUFlbkMsRUFBWSxJQUFNd0IsR0FJaEMsa0JBQVYxRSxJQUF3QkEsR0FBTyxFQUFPd0QsR0FDN0MsTUFBT25DLEdBQ1Usa0JBQVZyQixJQUF3QkEsR0FBTyxFQUFNcUIsRUFBRVciLCJmaWxlIjoibmctZ3B4MmN6bWwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAndXNlIHN0cmljdCc7XG5cbiAgIC8vQU1EIG1vZGVcbiAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgZGVmaW5lKFsnYW5ndWxhciddLCBmYWN0b3J5KTtcbiAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdhbmd1bGFyJykpO1xuICAgfSBlbHNlIHtcbiAgICAgZmFjdG9yeShyb290LmFuZ3VsYXIpO1xuICAgfVxuIH0odGhpcywgZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICd1c2Ugc3RyaWN0JztcblxuICAgLyoqXG4gICAgKiBncHgyY3ptbCBBbmd1bGFyIDEuMCBtb2R1bGVcbiAgICAqIEBtb2R1bGUgbmdHcHgyY3ptbFxuICAgICogQG5hbWUgbmdHcHgyY3ptbFxuICAgICovXG4gICByZXR1cm4gYW5ndWxhci5tb2R1bGUoJ25nR3B4MmN6bWwnLCBbXSlcbiAgICAgIC8qKlxuICAgICAgICogZ3B4MmN6bWwgc2VydmljZVxuICAgICAgICogQG5hbWUgZ3B4MmN6bWxcbiAgICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAgKi9cbiAgICAgLnNlcnZpY2UoJ2dweDJjem1sJywgZnVuY3Rpb24gKCRxLCAkaHR0cCkge1xuICAgICAgIHZhciBncHgyY3ptbCA9IHtcbiAgICAgICAgIGFzeW5jIDogZnVuY3Rpb24gKHVybCwgY2JGdW5jKSB7XG4gICAgICAgICAgIHZhciBodHRwUmVxdWVzdDtcbiAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgICBodHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG4gICAgICAgICAgICAgaHR0cFJlcXVlc3QgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgaHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZ2V0R3B4RGF0YTtcbiAgICAgICAgICAgaHR0cFJlcXVlc3Qub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgICAgaHR0cFJlcXVlc3Quc2VuZCgpO1xuXG4gICAgICAgICAgIGZ1bmN0aW9uIGdldEdweERhdGEoKSB7XG4gICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICBzZWxmLnBhcnNlR3B4KGh0dHBSZXF1ZXN0LnJlc3BvbnNlVGV4dCwgZnVuY3Rpb24gKGlzRXJyb3IsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKGlzRXJyb3IsIHJlcyk7XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKHRydWUsICdodHRwIHJlcXVlc3QgZXJyb3InKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAgIH0sXG4gICAgICAgICAvKipcbiAgICAgICAgICAqIGdweCBmaWxlIHVwbG9hZCDtlITroZzshLjsi7Eg7LKY66asKGFzeW5jKVxuICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBmaWxlcyBmaWxlIE9iamVjdFxuICAgICAgICAgICovXG4gICAgICAgICBhc3luY0Zyb21GaWxlIDogZnVuY3Rpb24gKGZpbGVzLCBjYkZ1bmMpIHtcbiAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ0ZpbGVzKGZpbGVzLCBmdW5jdGlvbiAoaXNFcnJvciwgcmVzKSB7XG5cbiAgICAgICAgICAgICBpZiAoaXNFcnJvcikge1xuICAgICAgICAgICAgICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKGlzRXJyb3IsIHJlcyk7XG4gICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgIHNlbGYucGFyc2VHcHgocmVzLCBmdW5jdGlvbiAoY3ptbEVycm9yLCBjem1sUmVzKSB7XG4gICAgICAgICAgICAgICAgIHR5cGVvZiBjYkZ1bmMgPT0gXCJmdW5jdGlvblwiICYmIGNiRnVuYyhjem1sRXJyb3IsIGN6bWxSZXMpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogZ3B4IGZpbGUgb2JqZWN0IO2UhOuhnOyEuOyLsSDsspjrpqxcbiAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZmlsZXMgZmlsZSBPYmplY3RcbiAgICAgICAgICAqL1xuICAgICAgICAgcHJvY2Vzc2luZ0ZpbGVzIDogZnVuY3Rpb24gKGUsIGNiRnVuYykge1xuICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICB2YXIgYnJvd3NlciA9ICdjaHJvbWUnO1xuXG4gICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXM7XG5cbiAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgIGRhdGEgPSByZWFkZXIuY29udGVudDtcbiAgICAgICAgICAgICAgICAgYnJvd3NlciA9ICdpZSc7XG4gICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICBkYXRhID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICB0eXBlb2YgY2JGdW5jID09IFwiZnVuY3Rpb25cIiAmJiBjYkZ1bmMoZmFsc2UsIGRhdGEpO1xuICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGVzWzBdLCAnVVRGLTgnKTtcbiAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgdGhyb3cgXCJmaWxlIGlzIG5vdCBkZWZpbmVkXCI7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgLy9maWxl7J2EIOydveqyjCDtlZzri6QuXG4gICAgICAgICAgICAgLy9yZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGZpbGVzWzBdKTtcbiAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgIHR5cGVvZiBjYkZ1bmMgPT0gXCJmdW5jdGlvblwiICYmIGNiRnVuYyh0cnVlLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgIH0sXG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogcGFyc2luZyBncHggZGF0YVxuICAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSBkYXRhIHBneCBzdHJpbmcgZGF0YVxuICAgICAgICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiRnVuYyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBjem1sRGF0YSBjb252ZXJ0IGN6bWwgb2JqZWN0IGRhdGFcbiAgICAgICAgICAqL1xuICAgICAgICAgcGFyc2VHcHggOiBmdW5jdGlvbiAoZGF0YSwgY2JGdW5jKSB7XG4gICAgICAgICAgIHZhciB0bXAseG1sO1xuXG4gICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgLy9pZiBET01QYXJzZXIgaXMgZXhpc3RcbiAgICAgICAgICAgICBpZiAod2luZG93LkRPTVBhcnNlcikge1xuICAgICAgICAgICAgICAgdG1wID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgICAgeG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG4gICAgICAgICAgICAgfSBlbHNlIHsgIC8vSUUgdmVyc2lvblxuICAgICAgICAgICAgICAgeG1sID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpO1xuICAgICAgICAgICAgICAgeG1sLmFzeW5jID0gXCJmYWxzZVwiO1xuICAgICAgICAgICAgICAgeG1sLmxvYWRYTUwoZGF0YSk7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgLy9nZXQgZ3B4IG5vZGUgZnJvbSB4bWwgZGF0YVxuICAgICAgICAgICAgIHZhciBncHhOb2RlID0geG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdncHgnKVswXTtcblxuICAgICAgICAgICAgIC8vYmluZCBjem1sZGF0YVxuICAgICAgICAgICAgLy8gIHRoaXMuYmluZEN6bWxEYXRhKGdweE5vZGUsIGZ1bmN0aW9uIChpc0Vycm9yLCBjem1sRGF0YSkge1xuICAgICAgICAgICAgLy8gICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKGlzRXJyb3IsIGN6bWxEYXRhKTtcbiAgICAgICAgICAgIC8vICB9KTtcbiAgICAgICAgICAgICB0aGlzLnBhcnNlWG1sKGdweE5vZGUpO1xuICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKHRydWUsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgIH0sXG5cbiAgICAgICAgIHBhcnNlWG1sIDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgY29uc29sZS5sb2cobm9kZSk7XG4gICAgICAgICB9LFxuXG4gICAgICAgICAvKipcbiAgICAgICAgICAqIGdldCB0ZXh0IGZyb20gdGFnXG4gICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHRhZyB0YWcgc3RyaW5nXG4gICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRhZ1N0ciB0YWcgc3RyaW5nXG4gICAgICAgICAgKi9cbiAgICAgICAgIGdldFRleHRUYWcgOiBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgIC8vdmFyIHRhZ1N0ciA9IHRhZy5pbm5lckhUTUwucmVwbGFjZSgvPFtePl0qPi9nLCBcIlwiKTtcbiAgICAgICAgICAgdmFyIHRhZ1N0ciA9IHRhZy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgdGFnU3RyLnJlcGxhY2UoLyheXFxzKil8KFxccyokKS9naSwgXCJcIik7XG5cbiAgICAgICAgICAgcmV0dXJuIHRhZ1N0cjtcbiAgICAgICAgIH0sXG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogY3ptbCBkYXRhIGJpbmRpbmdcbiAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZ3B4Tm9kZSBncHggeG1sIGRvbSBub2RlXG4gICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGN6bWxEYXRhIGN6bWwgb2JqZWN0IGRhdGFcbiAgICAgICAgICAqL1xuICAgICAgICAgYmluZEN6bWxEYXRhIDogZnVuY3Rpb24gKGdweE5vZGUsIGNiRnVuYykge1xuICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgIHZhciBzdW1FbGUgPSAwO1xuXG4gICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgLy94bWwgcGFyc2luZ1xuICAgICAgICAgICAgIHZhciBtZXRhRGF0YSA9IGdweE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGFkYXRhJylbMF0sIC8vbWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgdHJrQ29udGVudCA9IGdweE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyaycpWzBdLCAgLy90cmFja2luZyBkYXRhXG4gICAgICAgICAgICAgICAgIHRya1NlZyA9IHRya0NvbnRlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Rya3NlZycpWzBdLCAgLy90cmtzZWdcbiAgICAgICAgICAgICAgICAgdHJrUHRzID0gdHJrU2VnLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0cmtwdCcpOyAgLy90cmFja2luZyBwb2ludCBhcnJheXNcblxuICAgICAgICAgICAgIC8vZ2V0IHN0YXJ0IHRpbWVcbiAgICAgICAgICAgICB2YXIgc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICBzdGFydFNlY29uZHM7XG5cbiAgICAgICAgICAgICAvL2JpbmRpbmcgdGFyZ2V0XG4gICAgICAgICAgICAgdmFyIGN6bWxEYXRhID0gW3tcbiAgICAgICAgICAgICAgIG5hbWUgOiBncHhOb2RlLmdldEF0dHJpYnV0ZSgnY3JlYXRvcicpLFxuICAgICAgICAgICAgICAgdmVyc2lvbiA6IGdweE5vZGUuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJyksXG4gICAgICAgICAgICAgICBjbG9jayA6IHtcbiAgICAgICAgICAgICAgICAgaW50ZXJ2YWwgOiBudWxsLFxuICAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA6IHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA6IDEsXG4gICAgICAgICAgICAgICAgIHJhbmdlIDogJ0NMQU1QRUQnXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgcG9zaXRpb24gOiB7XG4gICAgICAgICAgICAgICAgIGVwb2NoIDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICBjYXJ0b2dyYXBoaWNEZWdyZWVzIDogW11cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XTtcblxuICAgICAgICAgICAgIHZhciBjdXJyZW50RWxlO1xuXG4gICAgICAgICAgICAgLy9zZXQgY2FydG9ncmFwaGljRGVncmVlcyBpbmZvXG4gICAgICAgICAgICAgZm9yKHZhciBpZHg9MDsgaWR4IDwgdHJrUHRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgIHZhciB0cmtJbmZvID0gdHJrUHRzW2lkeF0sXG4gICAgICAgICAgICAgICAgICAgbGF0ID0gcGFyc2VGbG9hdCh0cmtJbmZvLmdldEF0dHJpYnV0ZSgnbGF0JykpLCAgLy9sYXRpdHVkZVxuICAgICAgICAgICAgICAgICAgIGxvbiA9IHBhcnNlRmxvYXQodHJrSW5mby5nZXRBdHRyaWJ1dGUoJ2xvbicpKSwgIC8vbG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgZWxlID0gc2VsZi5nZXRUZXh0VGFnKHRya0luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2VsZScpWzBdKSwgIC8vZWxlXG4gICAgICAgICAgICAgICAgICAgdGltZSA9IHNlbGYuZ2V0VGV4dFRhZyh0cmtJbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aW1lJylbMF0pLCAgLy9pbnRlcnZhbCB0aW1lXG4gICAgICAgICAgICAgICAgICAgdGFyZ2V0U2Vjb25kcyA9IG5ldyBEYXRlKHRpbWUpLmdldFRpbWUoKSwgLy9pbnRlcnZhbCB0aW1lIGZyb20gc3RhcnRTZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgZGVmZlNlY29uZHMgPSAoaWR4ID09IDA/IDAgOiAoKHRhcmdldFNlY29uZHMgLSBzdGFydFNlY29uZHMpIC8gMTAwMCkpOyAgLy9jb252ZXJ0IHNlY29uZFxuXG4gICAgICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICAgICAgIHN0YXJ0U2Vjb25kcyA9IHRhcmdldFNlY29uZHM7XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIC8vaWYgZWxlIGluZm8gaXMgZW1wdHlcbiAgICAgICAgICAgICAgIGlmIChlbGUpIHtcbiAgICAgICAgICAgICAgICAgY3VycmVudEVsZSA9IHBhcnNlRmxvYXQoZWxlKTtcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXh0UHRzID0gdHJrUHRzW2lkeCArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgbmV4dEVsZSA9IG5leHRQdHMgPyBzZWxmLmdldFRleHRUYWcobmV4dFB0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZWxlJylbMF0pIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICBmb3IodmFyIGVpZHg9MDsgZWlkeCA8IHRya1B0cy5sZW5ndGg7IGVpZHgrKykge1xuICAgICAgICAgICAgICAgICAgIHZhciBlbGVJbmZvID0gdHJrUHRzW2VpZHhdLFxuICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGUgPSBzZWxmLmdldFRleHRUYWcoZWxlSW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZWxlJylbMF0pO1xuXG4gICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZSA9IHBhcnNlRmxvYXQodGFyZ2V0RWxlKTtcbiAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBjem1sRGF0YVsxXS5wb3NpdGlvbi5jYXJ0b2dyYXBoaWNEZWdyZWVzLnB1c2goZGVmZlNlY29uZHMpO1xuICAgICAgICAgICAgICAgY3ptbERhdGFbMV0ucG9zaXRpb24uY2FydG9ncmFwaGljRGVncmVlcy5wdXNoKGxvbik7XG4gICAgICAgICAgICAgICBjem1sRGF0YVsxXS5wb3NpdGlvbi5jYXJ0b2dyYXBoaWNEZWdyZWVzLnB1c2gobGF0KTtcbiAgICAgICAgICAgICAgIGN6bWxEYXRhWzFdLnBvc2l0aW9uLmNhcnRvZ3JhcGhpY0RlZ3JlZXMucHVzaChlbGU/IHBhcnNlRmxvYXQoZWxlKSA6IChuZXh0RWxlPyAoY3VycmVudEVsZSArIHBhcnNlRmxvYXQobmV4dEVsZSkpIC8gMiA6IGN1cnJlbnRFbGUpKTtcblxuICAgICAgICAgICAgICAgaWYgKGlkeCA9PSAodHJrUHRzLmxlbmd0aCAtMSkpIHtcbiAgICAgICAgICAgICAgICAgY3ptbERhdGFbMF0uY2xvY2suaW50ZXJ2YWwgPSBzdGFydFRpbWUgKyAnLycgKyB0aW1lO1xuICAgICAgICAgICAgICAgICBjem1sRGF0YVsxXS5hdmFpbGFiaWxpdHkgPSBzdGFydFRpbWUgKyAnLycgKyB0aW1lO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIHR5cGVvZiBjYkZ1bmMgPT0gXCJmdW5jdGlvblwiICYmIGNiRnVuYyhmYWxzZSwgY3ptbERhdGEpO1xuICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgdHlwZW9mIGNiRnVuYyA9PSBcImZ1bmN0aW9uXCIgJiYgY2JGdW5jKHRydWUsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICB9O1xuXG4gICAgICAgcmV0dXJuIGdweDJjem1sO1xuICAgICB9KTtcbiB9KSk7XG4iXX0=
