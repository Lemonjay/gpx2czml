"use strict";!function(){FileReader.prototype.readAsBinaryString||(FileReader.prototype.readAsBinaryString=function(t){var e="",n=this,r=new FileReader;r.onload=function(t){for(var a=new Uint8Array(r.result),o=a.byteLength,i=0;i<o;i++)e+=String.fromCharCode(a[i]);n.content=e,$(n).trigger("onload")},r.readAsArrayBuffer(t)});var t={async:function(t,e){function n(){4===r.readyState&&(200===r.status?a.parseGpx(r.responseText,function(t,n){"function"==typeof e&&e(t,n)}):"function"==typeof e&&e(!0,"http request error"))}var r,a=this;window.XMLHttpRequest?r=new XMLHttpRequest:window.ActiveXObject&&(r=new ActiveXObject("Microsoft.XMLHTTP")),r.onreadystatechange=n,r.open("GET",t),r.send()},asyncFromFile:function(t,e){var n=this;this.processingFiles(t,function(t,r){t?"function"==typeof e&&e(t,r):n.parseGpx(r,function(t,n){"function"==typeof e&&e(t,n)})})},processingFiles:function(t,e){var n=new FileReader,r="chrome";try{var a=t.target.files;if(n.onload=function(t){var a;t?a=t.target.result:(a=n.content,r="ie"),"function"==typeof e&&e(!1,a)},!(a.length>0))throw"file is not defined";n.readAsText(a[0],"UTF-8")}catch(t){"function"==typeof e&&e(!0,t.toString())}},parseGpx:function(t,e){var n,r;try{window.DOMParser?(n=new DOMParser,r=n.parseFromString(t,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(t));var a=r.getElementsByTagName("gpx")[0];this.bindCzmlData(a,function(t,n){"function"==typeof e&&e(t,n)})}catch(t){"function"==typeof e&&e(!0,t.toString())}},getTextTag:function(t){try{var e=t.textContent;return e.replace(/(^\s*)|(\s*$)/gi,""),e}catch(t){return null}},bindCzmlData:function(t,e){var n=this,r=0;try{for(var a,o,i=(t.getElementsByTagName("metadata")[0],t.getElementsByTagName("trk")[0]),s=i.getElementsByTagName("trkseg")[0],c=s.getElementsByTagName("trkpt"),g=[{name:t.getAttribute("creator"),version:t.getAttribute("version"),clock:{interval:null,currentTime:a,multiplier:1,range:"CLAMPED"}},{position:{epoch:a,cartographicDegrees:[]}}],p=0;p<c.length;p++){var l=c[p],f=parseFloat(l.getAttribute("lat")),u=parseFloat(l.getAttribute("lon")),y=n.getTextTag(l.getElementsByTagName("ele")[0]),h=n.getTextTag(l.getElementsByTagName("time")[0]),m=new Date(h).getTime(),d=0==p?0:(m-o)/1e3;0===p&&(a=h,o=m),r+=y?parseFloat(y):0;var v=r/(p+1);g[1].position.cartographicDegrees.push(d),g[1].position.cartographicDegrees.push(u),g[1].position.cartographicDegrees.push(f),g[1].position.cartographicDegrees.push(y?parseFloat(y):v),p==c.length-1&&(g[0].clock.interval=a+"/"+h,g[1].availability=a+"/"+h)}"function"==typeof e&&e(!1,g)}catch(t){"function"==typeof e&&e(!0,t.toString())}}};"undefined"!=typeof exports?module.exports=t:window.gpx2czml=t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
