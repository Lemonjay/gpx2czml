"use strict";!function(){FileReader.prototype.readAsBinaryString||(FileReader.prototype.readAsBinaryString=function(e){var t="",n=this,r=new FileReader;r.onload=function(e){for(var a=new Uint8Array(r.result),o=a.byteLength,i=0;i<o;i++)t+=String.fromCharCode(a[i]);n.content=t,$(n).trigger("onload")},r.readAsArrayBuffer(e)});var e={async:function(e,t){function n(){4===r.readyState&&(200===r.status?a.parseGpx(r.responseText,function(e,n){"function"==typeof t&&t(e,n)}):"function"==typeof t&&t(!0,"http request error"))}var r,a=this;window.XMLHttpRequest?r=new XMLHttpRequest:window.ActiveXObject&&(r=new ActiveXObject("Microsoft.XMLHTTP")),r.onreadystatechange=n,r.open("GET",e),r.send()},asyncFromFile:function(e,t){var n=this;this.processingFiles(e,function(e,r){e?"function"==typeof t&&t(e,r):n.parseGpx(r,function(e,n){"function"==typeof t&&t(e,n)})})},processingFiles:function(e,t){var n=new FileReader,r="chrome";try{var a=e.target.files;if(n.onload=function(e){var a;e?a=e.target.result:(a=n.content,r="ie"),"function"==typeof t&&t(!1,a)},!(a.length>0))throw"file is not defined";n.readAsText(a[0],"UTF-8")}catch(e){"function"==typeof t&&t(!0,e.toString())}},parseGpx:function(e,t){var n,r;try{window.DOMParser?(n=new DOMParser,r=n.parseFromString(e,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(e));var a=r.getElementsByTagName("gpx")[0];this.bindCzmlData(a,function(e,n){"function"==typeof t&&t(e,n)})}catch(e){"function"==typeof t&&t(!0,e.toString())}},getTextTag:function(e){try{var t=e.textContent;return t.replace(/(^\s*)|(\s*$)/gi,""),t}catch(e){return null}},bindCzmlData:function(e,t){var n=this,r=0;try{for(var a,o,i=(e.getElementsByTagName("metadata")[0],e.getElementsByTagName("trk")[0]),s=i.getElementsByTagName("trkseg")[0],c=i.getElementsByTagName("ele"),g=s.getElementsByTagName("trkpt"),l=[{name:e.getAttribute("creator"),version:e.getAttribute("version"),clock:{interval:null,currentTime:a,multiplier:1,range:"CLAMPED"}},{position:{epoch:a,cartographicDegrees:[]}}],p=0;p<c.length;p++){r+=parseFloat(n.getTextTag(c[p]))}for(var f=r/c.length,p=0;p<g.length;p++){var u=g[p],y=parseFloat(u.getAttribute("lat")),h=parseFloat(u.getAttribute("lon")),m=n.getTextTag(u.getElementsByTagName("ele")[0]),d=n.getTextTag(u.getElementsByTagName("time")[0]),T=new Date(d).getTime(),v=0==p?0:(T-o)/1e3;0===p&&(a=d,o=T),l[1].position.cartographicDegrees.push(v),l[1].position.cartographicDegrees.push(h),l[1].position.cartographicDegrees.push(y),l[1].position.cartographicDegrees.push(m?parseFloat(m):Math.round(f)),p==g.length-1&&(l[0].clock.interval=a+"/"+d,l[1].availability=a+"/"+d)}"function"==typeof t&&t(!1,l)}catch(e){"function"==typeof t&&t(!0,e.toString())}}};"undefined"!=typeof exports?module.exports=e:window.gpx2czml=e}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
